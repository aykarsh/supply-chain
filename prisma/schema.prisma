generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  role          Role           @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  inventoryLogs InventoryLog[]
  orders        Order[]
  products      Product[]
  // suppliers     Supplier[]
}

model Product {
  id            String            @id @default(cuid())
  name          String
  description   String?
  sku           String            @unique
  price         Decimal           @db.Decimal(10, 2)
  cost          Decimal           @db.Decimal(10, 2)
  categoryId    String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  createdById   String
  inventory     Inventory?
  inventoryLogs InventoryLog[]
  orderItems    OrderItem[]
  category      Category          @relation(fields: [categoryId], references: [id])
  createdBy     User              @relation(fields: [createdById], references: [id])
  suppliers     SupplierProduct[]
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Inventory {
  id          String   @id @default(cuid())
  productId   String   @unique
  quantity    Int      @default(0)
  minQuantity Int      @default(10)
  maxQuantity Int?
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  product     Product  @relation(fields: [productId], references: [id])
}

model InventoryLog {
  id          String           @id @default(cuid())
  productId   String
  quantity    Int
  type        InventoryLogType
  reason      String?
  createdAt   DateTime         @default(now())
  createdById String
  createdBy   User             @relation(fields: [createdById], references: [id])
  product     Product          @relation(fields: [productId], references: [id])
}

model Supplier {
  id          String            @id @default(cuid())
  name        String
  email       String?
  phone       String?
  address     String?
  contactName String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  createdById String
  orders      PurchaseOrder[]
  // createdBy   User              @relation(fields: [createdById], references: [id])
  products    SupplierProduct[]
}

model SupplierProduct {
  id         String   @id @default(cuid())
  supplierId String
  productId  String
  cost       Decimal  @db.Decimal(10, 2)
  leadTime   Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id])
  supplier   Supplier @relation(fields: [supplierId], references: [id])

  @@unique([supplierId, productId])
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String?  @unique
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Order {
  id          String      @id @default(cuid())
  customerId  String
  status      OrderStatus @default(PENDING)
  totalAmount Decimal     @db.Decimal(10, 2)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdById String
  createdBy   User        @relation(fields: [createdById], references: [id])
  customer    Customer    @relation(fields: [customerId], references: [id])
  items       OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  unitPrice Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model PurchaseOrder {
  id          String              @id @default(cuid())
  supplierId  String
  status      PurchaseOrderStatus @default(DRAFT)
  totalAmount Decimal             @db.Decimal(10, 2)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  supplier    Supplier            @relation(fields: [supplierId], references: [id])
  items       PurchaseOrderItem[]
}

model PurchaseOrderItem {
  id              String        @id @default(cuid())
  purchaseOrderId String
  productId       String
  quantity        Int
  unitCost        Decimal       @db.Decimal(10, 2)
  createdAt       DateTime      @default(now())
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
}

enum Role {
  ADMIN
  MANAGER
  USER
}

enum InventoryLogType {
  ADDITION
  REMOVAL
  ADJUSTMENT
  SALE
  PURCHASE
  RETURN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PurchaseOrderStatus {
  DRAFT
  SUBMITTED
  APPROVED
  RECEIVED
  CANCELLED
}


